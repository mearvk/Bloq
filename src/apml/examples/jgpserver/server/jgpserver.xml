<?xml version="1.0" encoding="UTF-8"?>
<?apml version="1.0" encoding="UTF-8"?>

<!--
Quick design sketch for Jarhgund Grisheld Server 
-->

<definitions class="apml.definitions.JGPserver">
    <jgpserver extends="java.lang.Object" class="apml.examples.jgpserver.JGPServer.java" shutdown="true"></jgpserver>   
</definitions>

/* Application Program Markup Language */
<apml language="Java 9" version="1.0">  
    
    /* jgp server quick example program */         
    
    <system start="true" id="jgpserver" class="apml.examples.jgpserver.JGPServerSystem" package="apml.examples.jgpserver">
        <object start="true" startorder="1" class="apml.examples.jgpserver.JGPServer" extends="apml.extensions.ServerSocketImpl" alias="ServerSocket">                           
            <listener id="esocl" class="JGPOnConnectListener" with="*" function="org.blah.Classname.function">
                <subscriber id="esocl_connect_sub_1" class="apml.examples.jgpserver.JGPServerOnConnect_1"></subscriber>
                <subscriber id="esocl_connect_sub_2" class="apml.examples.jgpserver.JGPServerOnConnect_2"></subscriber>
                <subscriber id="esocl_connect_sub_3" class="apml.examples.jgpserver.JGPServerOnConnect_3"></subscriber>
            </listener>
            <listener id="esoel" class="JGPOnExitListener" with="*">
                <subscriber id="esoel_exit_sub_1" class="apml.examples.jgpserver.JGPServerOnExit_1"></subscriber>
                <subscriber id="esoel_exit_sub_2" class="apml.examples.jgpserver.JGPServerOnExit_2"></subscriber>
                <subscriber id="esoel_exit_sub_3" class="apml.examples.jgpserver.JGPServerOnExit_3"></subscriber>
            </listener>
            <listener id="esorl" class="JGPOnReadListener" with="*">
                <subscriber id="esocl_receipt_sub_1" class="apml.examples.jgpserver.JGPServerOnReceipt_1"></subscriber>
                <subscriber id="esocl_receipt_sub_2" class="apml.examples.jgpserver.JGPServerOnReceipt_2"></subscriber>
                <subscriber id="esocl_receipt_sub_3" class="apml.examples.jgpserver.JGPServerOnReceipt_3"></subscriber>
            </listener>
            <listener id="esodl" class="JGPOnDispatchListener" with="*">
                <subscriber id="esocl_dispatch_sub_1" class="apml.examples.jgpserver.JGPServerOnDispatch_1"></subscriber>
                <subscriber id="esocl_dispatch_sub_2" class="apml.examples.jgpserver.JGPServerOnDispatch_2"></subscriber>
                <subscriber id="esocl_dispatch_sub_3" class="apml.examples.jgpserver.JGPServerOnDispatch_3"></subscriber>
            </listener>
        </object>
    </system>   
    
    <system start="true" id="jgpclient" class="apml.examples.jgpserver.JGPClientSystem" package="apml.examples.jgpserver">
        <object class="JGPClient">
            <listener class="JGPServerClientSocketListener">                
            </listener>
        </object>
    </system>                      
    
    <driver class="apml.examples.driver.StandardDriver"> //to start and attach APML objects to system framework; to build out skeleton for starters
        <template></template>
        <template></template>
        <template></template>
        <template></template>
    </driver>
    
    <compiler class="apml.examples.compiler.StdApmlToFortranCompiler"> //move APML markup over to Java
        <architect>Max Rupplin</architect>        
        <template type="camelcase"></template>
        <template type="annotations">formal</template>
        <template type="brackets">newline</template>
        <template type="class_treatment">inner</template>
    </compiler>
    
    <compiler class="apml.examples.compiler.StdCToApmlCompiler"> //move Java source code over to APML markup
        <architect>Max Rupplin</architect>        
        <template type=""></template>
        <template type=""></template>
    </compiler>    
    
    <inferencer>
        
    </inferencer>   
</apml>

ok now what?

structurally we need a couple things

1) instantiation
2) program start function (ie init, start, run, instead of just main)
3) system api underlayment

